priority -50

extends texmath

global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]
texIgnoreMathZones = ['texMathText']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]
def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

global !p

def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	
	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	
	snip.buffer[snip.line] = ''
	
	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n"

	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{tabular}\n$0"

	snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''
	
	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\"

	snip.expand_anon(final_str)

endglobal

snippet "\\?b(egin)?" "begin{} / end{}" br
\begin{${1:something}}
	${0:${VISUAL}}
\end{$1}
endsnippet

snippet abs "abstract environment" b
\begin{abstract}
	$0
\end{abstract}
endsnippet

snippet tab "tabular / array environment" b
\begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}}
$0${2/(?<=.)(c|l|r)|./(?1: & )/g}
\end{$1${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
endsnippet

pre_expand "create_table(snip)"
snippet "gentbl(\d+)x(\d+)" "Generate table of *width* by *height*" r  
endsnippet

pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}
	$0${5/(?<=.)(c|l|r)|./(?1: & )/g}
	\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${2:htpb}]
	\centering
	\includegraphics[width=${3:0.8}\linewidth]{${4:name.ext}}
	\caption{${4/(\w+)\.\w+/\u$1/}$0}%
	\label{fig:${4/(\w+)\.\w+/$1/}}
\end{figure}
endsnippet

snippet enum "Enumerate" b
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" b
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet it "Individual item" b
\item $0
endsnippet

snippet part "Part" b
\part{${1:part name}}%
\label{prt:${2:${1/(\w+)|\W+/(?1:\L$0\E:_)/ga}}}

$0
endsnippet

snippet cha "Chapter" b
\chapter{${1:chapter name}}%
\label{cha:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sec "Section"
\section{${1:${VISUAL:section name}}}%
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sec* "Section"
\section*{${1:${VISUAL:section name}}}%
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet


snippet sub "Subsection"
\subsection{${1:${VISUAL:subsection name}}}%
\label{sub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sub* "Subsection"
\subsection*{${1:${VISUAL:subsection name}}}%
\label{sub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet ssub "Subsubsection"
\subsubsection{${1:${VISUAL:subsubsection name}}}%
\label{ssub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet ssub* "Subsubsection"
\subsubsection*{${1:${VISUAL:subsubsection name}}}%
\label{ssub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet par "Paragraph"
\paragraph{${1:${VISUAL:paragraph name}}}%
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet subp "Subparagraph"
\subparagraph{${1:${VISUAL:subparagraph name}}}%
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet ac "Acroynm normal" b
\ac{${1:acronym}}
$0
endsnippet

snippet acl "Acroynm expanded" b
\acl{${1:acronym}}
$0
endsnippet


snippet ni "Non-indented paragraph" b
\noindent
$0
endsnippet

snippet pac "Package" b
\usepackage`!p snip.rv='[' if t[1] else ""`${1:options}`!p snip.rv = ']' if t[1] else ""`{${2:package}}$0
endsnippet

snippet lp "Long parenthesis" wA
\left(${1:${VISUAL:contents}}\right)$0
endsnippet

snippet "mint(ed)?( (\S+))?" "Minted code typeset" br
\begin{listing}
\begin{minted}[linenos,numbersep=5pt,frame=lines,framesep=2mm]{${1:`!p
snip.rv = match.group(3) if match.group(2) is not None else "language"`}}
${2:${VISUAL:code}}
\end{minted}
\caption{${3:caption name}}
\label{lst:${4:${3/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
\end{listing}

$0
endsnippet

snippet gln "New glossary item" b
\newglossaryentry{${1:identifier}}
{
  name={${2:name}},
  first={${3:first occurrence}},
  sort={${4:sort value}},
  description={${0:description}},
}
endsnippet
snippet glnl "New long glossary item" b
\longnewglossaryentry{${1:identifier}}
{
  name={${2:name}},
  first={${3:first occurrence}},
  sort={${4:sort value}},
}
{
  ${0:description}
}
endsnippet

snippet template "Basic template" b
% !TEX program = xelatex
\documentclass[a4paper]{article}
\usepackage[T1]{fontenc}
\usepackage{ctex}
\usepackage{caption}
\usepackage{physics}
\usepackage{float}
\usepackage{bm}
\usepackage{textcomp}
\usepackage{amsmath, amssymb}
\usepackage{import}
\usepackage{pdfpages}
\usepackage{xcolor}
\newcommand{\incfig}[2][1]{%
    \def\svgwidth{#1\columnwidth}
    \import{./figures/}{#2.pdf_tex}
}
\begin{document}
	$0
\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
\] $0
endsnippet

context "math()"
snippet // "Fraction" iA
\\dfrac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\dfrac{${VISUAL}}{$1}$0
endsnippet

#context "math()"
#snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)+/' "symbol dfrac" wrA
#\\dfrac{`!p snip.rv = match.group(1)`}{$1}$0
#endsnippet

context "math()"
snippet '([\w\^\{\}\\\)\(]+)/' "symbol dfrac" wrA
\\dfrac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() dfrac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\dfrac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`^`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])(\.)((\d)|([A-Za-z]))' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(3)`
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

snippet sum "sum" wA
\sum_{${1:n=1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet part "d/dx" iA
\dfrac{\partial $1}{\partial $2} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet fd "to the ... power" iA
_{$1}$0
endsnippet

priority 10
context "math()"
snippet "br" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])br" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

snippet code "pythoncode" i
\usepackage{listings}
\usepackage{graphicx}
\lstset{
    basicstyle          =   \sffamily,           
    keywordstyle        =   \bfseries,          
    commentstyle        =   \rmfamily\itshape,
    stringstyle         =   \ttfamily,  
    flexiblecolumns,                 
    showspaces          =   false,  
	numberstyle         =   \zihao{-5}\ttfamily,   
	showstringspaces    =   false,
    captionpos          =   t,      
    frame               =   lrtb,   
}

\lstdefinestyle{Python}{
    language        =   Python,
	basicstyle      =   \zihao{-5}\ttfamily,
    numberstyle     =   \zihao{-5}\ttfamily,
    keywordstyle    =   \color{blue},
    keywordstyle    =   [2] \color{red},
    stringstyle     =   \color{magenta},
    commentstyle    =   \color{red}\ttfamily,
    breaklines      =   true,   
    columns         =   fixed,  
	basewidth       =   0.5em,
}
endsnippet

snippet usecode "usepythoncode" i
\lstinputlisting[
    style       =   Python,
    caption     =   {\bf $2.py},
    label       =   {ff.py}
]{$1.py}
$0
endsnippet
 
context "math()"
snippet int "integral" iA
\\int_{${1:-\infty}}^{${2:\infty}}$0
endsnippet

context "math()"
snippet oint "intergral" iA
\\oint_{${1:z_0=1}}$0
endsnippet

context "math()"
snippet e; "epsilonn" iA
\\varepsilon
endsnippet

context "math()"
snippet cos "triangle" iA
\\cos $1
endsnippet 

context "math()"
snippet sin "triangle" iA
\\sin $1
endsnippet 

context "math()"
snippet wq "omega" iA
\\omega
endsnippet


snippet pic "picture" i
\begin{figure}[H]
            \centering
            \begin{minipage}[t]{0.48\textwidth}
                \centering
                \includegraphics[width=6cm]{$1}
                \caption*{}
            \end{minipage}
            \begin{minipage}[t]{0.48\textwidth}
                \centering
                \includegraphics[width=6cm]{$2}
                \caption*{}
            \end{minipage}
        \end{figure}

$0
endsnippet

context "math()"
snippet aq "alpha" iA
\\alpha$0
endsnippet

context "math()"
snippet yq "lambda" iA
\\lambda$0
endsnippet

context "math()"
snippet tg "bigtrianglup" iA
\\triangle
endsnippet

context "math()"
snippet div "nabla" iA
\\nabla
endsnippet

context "math()"
snippet curl "curl" iA
\\nabla\times
endsnippet

context "math()"
snippet hb "hbar" iA
\\hbar
endsnippet

snippet > ">=" i
\\geqslant $0
endsnippet

snippet < "<=" i
\\leqslant $0
endsnippet

snippet pr "propto" i
\\propto
endsnippet

context "math()"
snippet dart "partial 2" iA
\\frac{\\partial^2 $1}{\\partial $2^2}$0
endsnippet

context "math()"
priority 10
snippet ht "hat" wA
\hat{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])ht" "hat" wA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\bm `!p snip.rv=match.group(1)`
endsnippet

priority 1000
context "math()"
snippet "(RM)(\d)" "romanword" riA
\\uppercase\expandafter{\romannumeral`!p snip.rv=match.group(2)`}
endsnippet

context "math()"
snippet te "text" i
\textrm{$1}$0
endsnippet

context "math()" 
snippet t; "theta" iA
\theta
endsnippet

snippet inc "incfig" i
\begin{figure}[ht]
    \centering
    \incfig{$1}
    \caption{$2}
    \label{$3}
\end{figure}
endsnippet

snippet mbf "boldsymbol" iA
\boldsymbol{$1}$0
endsnippet


context  "math()"
snippet vp "varphi" iA
\varphi
endsnippet

context "math()"
snippet qw "mathfont" iA
\mathrm{$1}$0
endsnippet

snippet lb "mathbracket" wA
\left[${1:some}\right]$0
endsnippet

context "math()"
snippet e "e" w
\\mathrm{e}
endsnippet

snippet \a "alpha" i
\\alpha
endsnippet

snippet .= "approx" i
\\approx $0
endsnippet

snippet cd  "coordinate" iw
coordinate ($1) $0
endsnippet

snippet angle "tikz" iw
\draw pic["$${1:\alpha}$", draw=black, -, angle eccentricity=1.3, angle radius=10mm]{angle=$2};$0
endsnippet

context "math()"
snippet '([a-zA-Z])(\|)' "\left,\right" irA
\left. ${1:\mathrm{`!p snip.rv = match.group(1)`}}\right|$0
endsnippet

snippet ... "cdot"  iA
\cdots 
endsnippet

snippet cdsy "coordinate system" i
\draw[->]($1)--++(${2:5,0})node[below]{${3:X}} ($1)--++(${4:0,5})node[left]{${5:Y}};
endsnippet
# vim:ft=snippets:
